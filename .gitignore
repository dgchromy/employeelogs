# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and *not* Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port
	async function printData(data){
    let stockData = []
    let formattedData;
    //  await console.log(data)
    for(i = 0; i < data.length; i++) {
        formattedData = `Stock Symbol: ${data[i].symbol}, Company: ${data[i].longName} Stock Price: ${data[i].regularMarketPrice}, Stock Change Percentage: ${data[i].regularMarketChangePercent}`
        stockData.push(formattedData)
    }
    showData(stockData);
    return stockData;


    
    }
    async function showData(stockData){
    console.log(stockData)

    const symbol = data[i].symbol;
    const longName = data[i].longName;
    const regularMarketPrice = data[i].regularMarketPrice ;
    const regularMarketChangePercent = [];
    const APIKey = '16471ddbe1mshaa29c110d16c899p1efb9fjsn0e36b112d5de';
    
    for (let i = 0; i < result.status, result.body.finance.result[0].quotes; i++){
        var stockData = stockData[i];
        var ticker = $('<div></div>').addClass('ticker')
        ticker.append('<p>hello</p>');
        $('.cardArea').append(ticker);
        $('.symbol').append(symbol.data[i]);
        $('.company').append(longName.data[i]);
        $('.Stock price').append(regularMarketPrice.data[i]);
        $('.Percentage change').append(regularMarketChangePercent.data[i]);
	}
    }

}